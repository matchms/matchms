name: 'Python Build'

on: [push, pull_request]

jobs:

  build:
    name: ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.7']
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - uses: goanpeca/setup-miniconda@v1
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          activate-environment: matchms-dev
          environment-file: conda/environment-dev.yml
          condarc-file: conda/condarc.yml
          auto-activate-base: false
      - name: Conda info
        shell: bash -l {0}
        run: conda info
      - name: Python info
        shell: bash -l {0}
        run: |
          which python
          python --version
      - name: Conda list
        shell: bash -l {0}
        run: conda list
      - name: Check style against standards using prospector
        shell: bash -l {0}
        run: prospector -o grouped -o pylint:pylint-report.txt
      - name: Check whether import statements are used consistently
        shell: bash -l {0}
        run: isort --check-only --diff --conda-env matchms-dev --recursive --wrap-length 79 --lines-after-imports 2 --force-single-line --no-lines-before FUTURE --no-lines-before STDLIB --no-lines-before THIRDPARTY --no-lines-before FIRSTPARTY --no-lines-before LOCALFOLDER matchms/ tests/ integration-tests/
      - name: Build
        shell: bash -l {0}
        run: |
          python setup.py build
      - name: Build documentation
        shell: bash -l {0}
        run: |
          make coverage html
        working-directory: readthedocs/
        env:
          SPHINXOPTS: '-n'  # enable nit-picky mode
      - name: Check documentation coverage threshold
        if: matrix.os == 'ubuntu-latest'
        shell: bash -l {0}
        run: |
          cat readthedocs/_build/coverage/python.txt
          UNCOVERED_MEMBERS=$(grep '*' readthedocs/_build/coverage/python.txt | wc -l)
          UNCOVERED_MEMBERS_ALLOWED=25
          if (( $UNCOVERED_MEMBERS > $UNCOVERED_MEMBERS_ALLOWED )) ; then echo "There are currently ${UNCOVERED_MEMBERS} uncovered members in the documentation, which is more than the ${UNCOVERED_MEMBERS_ALLOWED} allowed."; exit 1;fi
          echo "The code is sufficiently documented with ${UNCOVERED_MEMBERS} uncovered members out of ${UNCOVERED_MEMBERS_ALLOWED} allowed.";
      - name: Test
        if: matrix.os != 'ubuntu-latest'
        shell: bash -l {0}
        run: |
          python setup.py test
      - name: Test with coverage
        if: matrix.os == 'ubuntu-latest'
        shell: bash -l {0}
        run: |
          pytest --cov --cov-report term --cov-report xml --junitxml=xunit-result.xml
      - name: Correct coverage paths
        if: matrix.os == 'ubuntu-latest'
        run: sed -i "s+$PWD/++g" coverage.xml
      - name: SonarCloud Scan
        if: matrix.os == 'ubuntu-latest'
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
